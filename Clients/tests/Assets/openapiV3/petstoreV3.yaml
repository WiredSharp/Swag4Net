openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
    - url: https://{username}.gigantic-server.com:{port}/{basePath}
      description: The production API server
      variables:
        username:
          # note! no enum here means it is an open value
          default: demo
          description: this value is assigned by the service provider, in this example `gigantic-server.com`
        port:
          enum:
            - '8443'
            - '443'
          default: '8443'
        basePath:
          # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`
          default: v2
    - url: https://{username}.gigantic-server2.com:{port}/{basePath}
      description: The production API server 2
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
    - name: requestId
      in: header
      description: ID of pet to use
      required: true
      schema:
        type: array
        style: simple
      items:
        type: string

    servers:
    - url: https://{username}.gigantic-server3.com:{port}/{basePath}
      description: The production API server 3

  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{id}:
    parameters:
    - name: id
      in: path
      required: true
      description: the user identifier, as userId 
      schema:
        type: string
    get:
      operationId: userById
      responses:
        '200':
          description: the user being returned
          content:
            application/json:
              schema:
                type: object
                required:
                - name
                discriminator:
                  propertyName: petType
                  mapping:
                    dog: '#/components/schemas/Dog'
                    monster: 'https://gigantic-server.com/schemas/Monster/schema.json'
                properties:
                  name:
                    type: string
                  address:
                    $ref: '#/components/schemas/Address'
                  age:
                    type: integer
                    format: int32
                    minimum: 0
          links:
            address:
              operationId: getUserAddress
              parameters:
                userId: $request.path.id
components:
  schemas:
    Pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
      properties:
        message:
          type: string
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    ExtendedErrorModel:
      oneOf:
        - $ref: "#/components/schemas/ErrorModel"
        - type: object
          required:
          - rootCause
          properties:
            rootCause:
              type: string

  parameters:
    offsetParam:      # Can be referenced via '#/components/parameters/offsetParam'
      name: offset
      in: query
      description: Number of items to skip before returning the results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    limitParam:       # Can be referenced as '#/components/parameters/limitParam'
      name: limit
      in: query
      description: Maximum number of items to return.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
  #-------------------------------
  # Reusable responses
  #-------------------------------
  responses:
    404NotFound:       # Can be referenced as '#/components/responses/404NotFound'
      description: The specified resource was not found.
    ImageResponse:     # Can be referenced as '#/components/responses/ImageResponse'
      description: An image.
      content:
        image/*:
          schema:
            type: string
            format: binary
    GenericError:      # Can be referenced as '#/components/responses/GenericError'
      description: An error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
